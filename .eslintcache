[{"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\index.tsx":"1","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\App.tsx":"2","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\styles\\global.ts":"3","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Signin\\index.tsx":"4","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Signin\\styles.ts":"5","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Input\\index.tsx":"6","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Button\\index.tsx":"7","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Input\\styles.ts":"8","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Button\\styles.ts":"9","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\SignUp\\index.tsx":"10","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\SignUp\\styles.ts":"11","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\utils\\getValidationErrors.ts":"12","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Tooltip\\index.tsx":"13","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\services\\api.ts":"14","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\index.tsx":"15","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\styles.ts":"16","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\index.tsx":"17","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\auth.tsx":"18","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\toast.tsx":"19","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\Toast\\index.tsx":"20","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\Toast\\styles.ts":"21","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\routes\\index.tsx":"22","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\routes\\Route.tsx":"23","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Dashboard\\index.tsx":"24"},{"size":198,"mtime":1608599341133,"results":"25","hashOfConfig":"26"},{"size":350,"mtime":1613424610510,"results":"27","hashOfConfig":"26"},{"size":516,"mtime":1608595910948,"results":"28","hashOfConfig":"26"},{"size":2774,"mtime":1613595638415,"results":"29","hashOfConfig":"26"},{"size":1845,"mtime":1613425391790,"results":"30","hashOfConfig":"26"},{"size":1561,"mtime":1609852647338,"results":"31","hashOfConfig":"26"},{"size":316,"mtime":1608938582832,"results":"32","hashOfConfig":"26"},{"size":1104,"mtime":1609854369331,"results":"33","hashOfConfig":"26"},{"size":422,"mtime":1608939372169,"results":"34","hashOfConfig":"26"},{"size":2943,"mtime":1613595469003,"results":"35","hashOfConfig":"26"},{"size":1846,"mtime":1613425544158,"results":"36","hashOfConfig":"26"},{"size":320,"mtime":1609309398511,"results":"37","hashOfConfig":"26"},{"size":383,"mtime":1609852755817,"results":"38","hashOfConfig":"26"},{"size":116,"mtime":1612794784872,"results":"39","hashOfConfig":"26"},{"size":754,"mtime":1613420302035,"results":"40","hashOfConfig":"26"},{"size":162,"mtime":1613164477031,"results":"41","hashOfConfig":"26"},{"size":272,"mtime":1612987188616,"results":"42","hashOfConfig":"26"},{"size":2140,"mtime":1613599729281,"results":"43","hashOfConfig":"26"},{"size":1442,"mtime":1613163444008,"results":"44","hashOfConfig":"26"},{"size":1229,"mtime":1613420643135,"results":"45","hashOfConfig":"26"},{"size":1234,"mtime":1613420501839,"results":"46","hashOfConfig":"26"},{"size":467,"mtime":1613509239901,"results":"47","hashOfConfig":"26"},{"size":801,"mtime":1613509378149,"results":"48","hashOfConfig":"26"},{"size":109,"mtime":1613508025099,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1a4tlq6",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\index.tsx",[],["107","108","109","110","111"],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\App.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\styles\\global.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Signin\\index.tsx",["112"],"import React, { useRef, useCallback } from 'react';\nimport * as Yup from 'yup';\nimport { FiLogIn, FiMail, FiLock } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Container, Content, Background, AnimationContainer } from './styles';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport { useAuth } from '../../hooks/auth';\nimport { useToast } from '../../hooks/toast';\n\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\n\nimport logoImg from '../../assets/logo.svg';\n\ninterface SignInFormData {\n  email: string;\n  password: string;\n}\n\nconst SignIn: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const { signIn } = useAuth();\n  const { addToast } = useToast();\n  const history = useHistory();\n\n  const handleSubmit = useCallback(\n    async (data: SignInFormData) => {\n      try {\n        formRef.current?.setErrors({});\n        const schema = Yup.object().shape({\n          email: Yup.string()\n            .required('E-mail obrigatório')\n            .email('Digite um e-mail válido'),\n          password: Yup.string().required('Senha obrigatória'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        await signIn({\n          email: data.email,\n          password: data.password,\n        });\n        history.push('/dashboard');\n      } catch (error) {\n        if (error instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(error);\n\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        addToast({\n          type: 'error',\n          title: 'Erro na autenticação',\n          description: 'Ocorreu um erro ao fazer login, cheque as credenciais',\n        });\n      }\n    },\n    [signIn, addToast, history],\n  );\n\n  return (\n    <Container>\n      <Content>\n        <AnimationContainer>\n          <img src={logoImg} alt=\"GoBarber\" />\n\n          <Form ref={formRef} onSubmit={handleSubmit}>\n            <h1>Faça seu login</h1>\n\n            <Input\n              name=\"email\"\n              type=\"text\"\n              icon={FiMail}\n              placeholder=\"E-mail\"\n            />\n\n            <Input\n              name=\"password\"\n              type=\"password\"\n              icon={FiLock}\n              placeholder=\"Senha\"\n            />\n\n            <Button type=\"submit\">Entrar</Button>\n\n            <a href=\"forgot\">Esqueci minha senha</a>\n          </Form>\n\n          <Link to=\"/signup\">\n            <FiLogIn />\n            Criar conta\n          </Link>\n        </AnimationContainer>\n      </Content>\n\n      <Background />\n    </Container>\n  );\n};\n\nexport default SignIn;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Signin\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Input\\index.tsx",["113","114"],"import { useField } from '@unform/core';\nimport React, {\n  InputHTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { IconBaseProps } from 'react-icons/lib';\nimport { FiAlertCircle } from 'react-icons/fi';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"c53030\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default Input;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Button\\index.tsx",["115"],"import React, { ButtonHTMLAttributes } from 'react';\n\nimport { Container } from './styles';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button: React.FC<ButtonProps> = ({ children, ...rest }) => (\n  <Container type=\"button\" {...rest}>\n    {children}\n  </Container>\n);\n\nexport default Button;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Input\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Button\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\SignUp\\index.tsx",["116"],"import React, { useCallback, useRef } from 'react';\nimport { FiMail, FiLock, FiUser, FiArrowLeft } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport { FormHandles } from '@unform/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport { Container, Content, Background, AnimationContainer } from './styles';\nimport api from '../../services/api';\nimport { useToast } from '../../hooks/toast';\n\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\n\nimport logoImg from '../../assets/logo.svg';\n\ninterface SignUpFormData {\n  name: string;\n  email: string;\n  password: string;\n}\n\nconst SignUp: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToast();\n  const history = useHistory();\n\n  const handleSubmit = useCallback(\n    async (data: SignUpFormData) => {\n      try {\n        formRef.current?.setErrors({});\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome obrigatório'),\n          email: Yup.string()\n            .required('E-mail obrigatório')\n            .email('Digite um e-mail válido'),\n          password: Yup.string().min(6, 'No minimo 6 digitos'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        await api.post('/users', data);\n\n        history.push('/');\n\n        addToast({\n          type: 'success',\n          title: 'Cadastro realizado!',\n          description: 'Voce ja pode fazer seu login no GoBarber!',\n        });\n      } catch (error) {\n        if (error instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(error);\n\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        addToast({\n          type: 'error',\n          title: 'Erro no cadastro',\n          description: 'Ocorreu um erro ao fazer cadastro, tente novamente',\n        });\n      }\n    },\n    [addToast, history],\n  );\n\n  return (\n    <Container>\n      <Background />\n\n      <Content>\n        <AnimationContainer>\n          <img src={logoImg} alt=\"GoBarber\" />\n\n          <Form ref={formRef} onSubmit={handleSubmit}>\n            <h1>Faça seu cadastro</h1>\n\n            <Input name=\"name\" type=\"text\" icon={FiUser} placeholder=\"Nome\" />\n\n            <Input\n              name=\"email\"\n              type=\"text\"\n              icon={FiMail}\n              placeholder=\"E-mail\"\n            />\n\n            <Input\n              name=\"password\"\n              type=\"password\"\n              icon={FiLock}\n              placeholder=\"Senha\"\n            />\n\n            <Button type=\"submit\">Cadastrar</Button>\n          </Form>\n\n          <Link to=\"/\">\n            <FiArrowLeft />\n            Voltar para o login\n          </Link>\n        </AnimationContainer>\n      </Content>\n    </Container>\n  );\n};\n\nexport default SignUp;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\SignUp\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\utils\\getValidationErrors.ts",["117"],"import { ValidationError } from 'yup';\n\ninterface Errors {\n  [key: string]: string;\n}\n\nexport default function getValidationErrors(err: ValidationError): Errors {\n  const validationErrors: Errors = {};\n\n  err.inner.forEach(error => {\n    validationErrors[error.path] = error.message;\n  });\n\n  return validationErrors;\n}\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\Tooltip\\index.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\services\\api.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\index.tsx",["118","119"],"import React from 'react';\nimport { useTransition } from 'react-spring';\nimport { Container } from './styles';\nimport { ToastMessage, useToast } from '../../hooks/toast';\nimport Toast from './Toast';\n\ninterface ToastContainerProps {\n  messages: ToastMessage[];\n}\n\nconst ToastContainer: React.FC<ToastContainerProps> = ({ messages }) => {\n  const messagesWithTransition = useTransition(\n    messages,\n    message => message.id,\n    {\n      from: { right: '-120%' },\n      enter: { right: '0%' },\n      leave: { right: '-120%' },\n    },\n  );\n\n  return (\n    <Container>\n      {messagesWithTransition.map(({ item, key, props }) => (\n        <Toast key={key} style={props} message={item} />\n      ))}\n    </Container>\n  );\n};\n\nexport default ToastContainer;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\index.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\auth.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\hooks\\toast.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\Toast\\index.tsx",["120"],"import React, { useEffect } from 'react';\nimport {\n  FiAlertCircle,\n  FiXCircle,\n  FiCheckCircle,\n  FiInfo,\n} from 'react-icons/fi';\nimport { Container } from './styles';\nimport { ToastMessage, useToast } from '../../../hooks/toast';\n\ninterface ToastProps {\n  message: ToastMessage;\n  style: Record<string, unknown>;\n}\n\nconst icons = {\n  info: <FiInfo size={24} />,\n  error: <FiAlertCircle size={24} />,\n  success: <FiCheckCircle size={24} />,\n};\n\nconst Toast: React.FC<ToastProps> = ({ message, style }) => {\n  const { removeToast } = useToast();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      removeToast(message.id);\n    }, 3000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [removeToast, message.id]);\n\n  return (\n    <Container\n      type={message.type}\n      hasDescription={!!message.description}\n      style={style}\n    >\n      {icons[message.type || 'info']}\n\n      <FiAlertCircle size={20} />\n\n      <div>\n        <strong>{message.title}</strong>\n        {message.description && <p>{message.description}</p>}\n      </div>\n\n      <button onClick={() => removeToast(message.id)} type=\"button\">\n        <FiXCircle size={18} />\n      </button>\n    </Container>\n  );\n};\n\nexport default Toast;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\components\\ToastContainer\\Toast\\styles.ts",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\routes\\index.tsx",[],"C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\routes\\Route.tsx",["121"],"import React from 'react';\nimport {\n  Route as ReactDOMRoute,\n  RouteProps as ReactDOMRouteProps,\n  Redirect,\n} from 'react-router-dom';\nimport { useAuth } from '../hooks/auth';\n\ninterface RouteProps extends ReactDOMRouteProps {\n  isPrivate?: boolean;\n  component: React.ComponentType;\n}\n\nconst Route: React.FC<RouteProps> = ({\n  isPrivate = false,\n  component: Component,\n  ...rest\n}) => {\n  const { user } = useAuth();\n\n  return (\n    <ReactDOMRoute\n      {...rest}\n      render={({ location }) => {\n        return isPrivate === !!user ? (\n          <Component />\n        ) : (\n          <Redirect\n            to={{\n              pathname: isPrivate ? '/' : '/dashboard',\n              state: { from: location },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default Route;\n","C:\\Users\\licur\\Documents\\GitHub\\GoStack\\Nivel02\\06-gobarber-web\\src\\pages\\Dashboard\\index.tsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":21},{"ruleId":"132","severity":1,"message":"136","line":3,"column":3,"nodeType":"134","messageId":"135","endLine":3,"endColumn":22},{"ruleId":"132","severity":1,"message":"137","line":9,"column":10,"nodeType":"134","messageId":"135","endLine":9,"endColumn":23},{"ruleId":"132","severity":1,"message":"138","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":21},{"ruleId":"132","severity":1,"message":"139","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"140","line":4,"column":10,"nodeType":"134","messageId":"135","endLine":4,"endColumn":22},{"ruleId":"132","severity":1,"message":"141","line":4,"column":24,"nodeType":"134","messageId":"135","endLine":4,"endColumn":32},{"ruleId":"132","severity":1,"message":"140","line":9,"column":10,"nodeType":"134","messageId":"135","endLine":9,"endColumn":22},{"ruleId":"132","severity":1,"message":"142","line":4,"column":17,"nodeType":"134","messageId":"135","endLine":4,"endColumn":35},"lines-around-directive",["143"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'FormHandles' is defined but never used.","Identifier","unusedVar","'InputHTMLAttributes' is defined but never used.","'IconBaseProps' is defined but never used.","'ButtonHTMLAttributes' is defined but never used.","'ValidationError' is defined but never used.","'ToastMessage' is defined but never used.","'useToast' is defined but never used.","'ReactDOMRouteProps' is defined but never used.","padding-line-between-statements"]